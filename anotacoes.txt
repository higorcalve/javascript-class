HTML: linguagem de marcação (desenvolve)
CSS: linguagem de estilo (desenvolve)
JS: linguagem de programação! (programa)

Carrega-se primeiro o conteúdo JavaScript e só depois o HTML

Pop-up de Alerta na tela:
window.alert('Minha primeira mensagem!')
Opção "Ok"

Pop-up de Confirmação na tela:
window.confirm('Está gostando de JS?')
Opção "Ok" e "Cancelar"

Pop-up de Perguntas na tela:
window.prompt('Qual é seu nome?')
Caixa de texto e "Ok"

document.write('Seu nome é ${nome}')
   Interpolação (aula 06)
   Escreve no documento (não em pop-up)

Pode remover a palavra "window." no código
Nos casos acima não precisa de ";" no final

Módulo B:
- Armazenamento de dados
- Tratamento de dados
- Operações com dados

Comentários em JS:
// para comentário em 1 linha
ou 
/* */ para comentário em mais de 1 linha

VARIÁVEIS EM JS. (var)

vaga a1 = carro1 == vaga a1 recebe carro1
UM sinal de = (igual) significa RECEBE

Para vaga a1 = carro2 == vaga a1 recebe carro2 (a1 substitui carro1 por carro2!)

vaga a1 = null == nula == vazia (esvazia a1)

** Atribuição
var n1 = 5 
var n2 = 8.5
var n3 = 13
(number)

var s1 = "JavaScript"
var s2 = 'Curso em Vídeo'
var s3 = `Guanabara`
(string -> entre aspas duplo, aspas simples, crase TEM DIFERENÇA)

** Identificadores
Regras:
- Podem começar com letra, $ ou _
- Não podem começar com números
- É possível usar letras ou números
- É possível utilizar acentos ou símbolos
- Não podem conter espaços (substituir por _ )
- Não podem ser palavras reservadas (function, alert, var.....)

ABRINDO O NODE
1ª opção: pelo Iniciar > Node.JS
2ª opção: pelo VSCode > Terminal > Novo Terminal > node

para sair do node: .exit
para fechar o terminal: exit

Ctrl + L >> limpa o terminal

Dicas para Identificadores:
- Maiúsculas e Minúsculas fazem a difença
- Escolha nomes coerentes para as variáveis

(Mod-B 05):

Tipos Primitivos (Data Types)

Números Inteiros == 1; 5; 10
Números Reais (Float) == 0.5; -15.9; 8.0
Para JS Inteiros e Reais são *number*
   > Infinity
   > NaN == not an number

CPF, Telefone
Cadeias de Caracteres == *string*

true ; false
Valores Booleanos == *boolean*

*null* (para JS é um object)
diferente de
*undefined*

*object*
   > Array

*function*

typeof == tipo de
(mostra o tipo primitivo da variável)

Definir uma váriável em JS não significa definir um tipo primitivo!

(Mod-B 06)

Tratamento/Manipulação de Dados: (var/let/const são diferentes)

A variável nome recebe o resultado do prompt que vai aparecer na janela.
var nome = window.prompt ("Qual é o seu nome?")

Para mostrar o valor da variável nome:
window.alert("É um prazer te conhecer, " + nome) >> o sinal de 

+ soma number
+ concatena string

window.prompt sempre retorna uma String!

Conversão de String para Número:
   >Number(n) => converte para Number (independente se é inteiro ou real)
   >Number.parseInt(n)   Para números inteiros      (pode remover o "Number") (I do Int é maiúsculo!)
   >Number.parseFloat(n) Para números reais (com .) (pode remover o "Number") (F do Float é maiúsculo!)

Conversão de Número para String:
   >String(n)
   >n.toString()

Interpolação::
var s = 'JavaScript'

Template String:
Necessita-se usar CRASE (') para a frase
Usar ${s} (placeholder)
   >'Eu estou aprendendo ${s}'

s.lenght >> informa quantos caracteres a string tem (atributo)
não tem parênteses pois não retorna nada

s.toUpperCase() >> tudo para 'MAIÚSCULAS'

s.toLowerCase() >> tudo para 'minúsculas'

document.write() >> escreve no documento
document.writeln() >> pula linha


Manipulando números:

n1.toFixed(2) >> 2 casas decimais (método interno)

n1.toFixed(2).replace('.', ',') >> substitui ponto por vírgula

n1.toLocaleString('pr-BR', {style: 'currency', currency: 'BRL'}) >> para colocar o valor em Real (R$) >> Localizar uma String em pt-br. mostrar (style) em valor monetário (currency). currency vai ser em BRL (real do Brasil)

(Mod-B - Operadores)

(pt1) Aula 07

Aritméticos;
Atribuição;
Relacionais;
Lógicos;
Ternário.

Aritméticos:
Operadores Binários
(+) == soma
(-) == subtração
(*) == multiplicação
(/) == divisão (real, leva vírgula)
(%) == resto (da divisão inteira) (if x % 2 == 1 , x é impar)
(**) == potência (elevado à)

Ordem de Precedência de Operadores:
()
**
* , / , %  ordem da esquerda para direita
+ , -

Exemplos com Operador de Atribuição (=)
var a = 5 + 8
a = 8 
var b = a % 5
b = 3
var c = 5 * b ** 2  >>  3 ** 2  >>  5 * 9
c = 45
var d = 10 - a / 2  >>  8 / 2  >>  10 - 4
d = 6
var e = 6 * 2 / d  >>  6 * 2  >>  12 / 6
e = 2
var f = b % e + 4 / e  >>  3 % 2  >>  1 + 4 / e  >>  4 / 2  >>  1 + 2
f = 3

Auto-atribuições
var n = 3

n = n + 4  >> n += 4
n = 7
n = n - 5  >> n -= 5
n = 2
n = n * 4  >> n *= 4
n = 8
n = n / 2  >> n /= 2
n = 4
n = n **2  >> n **=2
n = 16
n = n % 5  >> n %= 5
n = 1

n = n + 1  >> n++ (++ depois é pós-incremento)
n = n - 1  >> n-- (-- depois é pós-decremento)

++n é pré-incremento
--n é pré-decremento

(pt2) Aula 08

Relacionais:
-Maior: >
-Menor: <
-Maior ou igual: >=
-Menor ou igual: <=
-Igual: ==
-Não Igual: != (diferente)

Para toda operação relacional, o resultado será sempre um valor booleano!

Identidade:
5 == 5   >> true
5 == '5' >> true
Em JavaScript 2 = não testa o tipo, mas o mesmo valor/grandeza
5 === '5'  >> false
Em JavaScript 3 = testa se são idênticos.
5 !== '5'  >> true (desigual restrito)

Lógicos:
!  >> negação (não)
&& >> conjunção (e)
|| >> disjunção (ou)

(!) operador unário:
!true -> false
!false -> true

(&&) operador binário:
true && true -> true
true && false -> false
false && true -> false
false && false -> false
SÓ SE SATISFAZ QUANDO AS DUAS FOREM TRUE

(||) operador binário:
true || true -> true
true || false -> true
false || true -> true
false || false -> false
BASTA UM TRUE PARA SATISFAZER

Precedência de Operadores:
Aritméticos > Relacionais > Lógicos

Precedência dos Operadores Lógicos:
! > && > ||

Operador Ternário:
(?) -> Teste
(:) -> Resultado True:False (oque acontece se for verdadeiro : falso)
Ex.:
média >=7.0 ? "Aprovado" : "Reprovado"

(Mod-C - DOM)
Document Object Model (Modelo de Objetos para Documentos)

Árvore DOM (parent(acima) e child(abaixo))
Começa da Raiz

Tudo dentro do JS está dentro do objeto window (janela)

Dentro de window tem vários outros objetos, exemplo:
location (qual é a página, URL);
document (atual);
history (histórico de onde você veio e para onde vai).

Dentro de document, tem outros objetos, como:
html

Dentro do html tem:
head;
body.

Dentro de head:
meta;
title.

Dentro de body:
h1;
p;
div.

Resumindo: não é o ideal, mas você pode adicionar componentes com JS através da árvore DOM.
innerText == texto interno
innerHTML == texto formatado

Selecionando os Elementos por: getElementsBy
-Marca (TagName);
-ID (Id);
-Nome (Name);
-Classe;
-Seletor (CSS)

Marca:
document.getElementsByTagName('elemento')[nº do elemento iniciando em 0]

ID:
document.getElementById('Id')

Nome:
document.getElementsByTagName('nome')[nº do elemento iniciando em 0]

Classe:
document.getElementsByClassName('classe')[nº do elemento iniciando em 0]

Seletor (recomendada):
document.querySelector('seletor CSS id/class')